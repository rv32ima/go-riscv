// Code generated by parse.py -go rv32_i rv_i rv_m rv_a rv_zicsr; DO NOT EDIT.
package riscv

import (
  "fmt"
)

type Instr struct{
  name string
  match uint32
  mask uint32
}

var InvalidInstrErr = fmt.Errorf("invalid instruction")

var ADD = Instr{
    name: "ADD",
    match: 0x33,
    mask: 0xfe00707f,
}

var ADDI = Instr{
    name: "ADDI",
    match: 0x13,
    mask: 0x707f,
}

var AMOADDW = Instr{
    name: "AMOADDW",
    match: 0x202f,
    mask: 0xf800707f,
}

var AMOANDW = Instr{
    name: "AMOANDW",
    match: 0x6000202f,
    mask: 0xf800707f,
}

var AMOMAXW = Instr{
    name: "AMOMAXW",
    match: 0xa000202f,
    mask: 0xf800707f,
}

var AMOMAXUW = Instr{
    name: "AMOMAXUW",
    match: 0xe000202f,
    mask: 0xf800707f,
}

var AMOMINW = Instr{
    name: "AMOMINW",
    match: 0x8000202f,
    mask: 0xf800707f,
}

var AMOMINUW = Instr{
    name: "AMOMINUW",
    match: 0xc000202f,
    mask: 0xf800707f,
}

var AMOORW = Instr{
    name: "AMOORW",
    match: 0x4000202f,
    mask: 0xf800707f,
}

var AMOSWAPW = Instr{
    name: "AMOSWAPW",
    match: 0x800202f,
    mask: 0xf800707f,
}

var AMOXORW = Instr{
    name: "AMOXORW",
    match: 0x2000202f,
    mask: 0xf800707f,
}

var AND = Instr{
    name: "AND",
    match: 0x7033,
    mask: 0xfe00707f,
}

var ANDI = Instr{
    name: "ANDI",
    match: 0x7013,
    mask: 0x707f,
}

var AUIPC = Instr{
    name: "AUIPC",
    match: 0x17,
    mask: 0x7f,
}

var BEQ = Instr{
    name: "BEQ",
    match: 0x63,
    mask: 0x707f,
}

var BGE = Instr{
    name: "BGE",
    match: 0x5063,
    mask: 0x707f,
}

var BGEU = Instr{
    name: "BGEU",
    match: 0x7063,
    mask: 0x707f,
}

var BLT = Instr{
    name: "BLT",
    match: 0x4063,
    mask: 0x707f,
}

var BLTU = Instr{
    name: "BLTU",
    match: 0x6063,
    mask: 0x707f,
}

var BNE = Instr{
    name: "BNE",
    match: 0x1063,
    mask: 0x707f,
}

var CSRRC = Instr{
    name: "CSRRC",
    match: 0x3073,
    mask: 0x707f,
}

var CSRRCI = Instr{
    name: "CSRRCI",
    match: 0x7073,
    mask: 0x707f,
}

var CSRRS = Instr{
    name: "CSRRS",
    match: 0x2073,
    mask: 0x707f,
}

var CSRRSI = Instr{
    name: "CSRRSI",
    match: 0x6073,
    mask: 0x707f,
}

var CSRRW = Instr{
    name: "CSRRW",
    match: 0x1073,
    mask: 0x707f,
}

var CSRRWI = Instr{
    name: "CSRRWI",
    match: 0x5073,
    mask: 0x707f,
}

var DIV = Instr{
    name: "DIV",
    match: 0x2004033,
    mask: 0xfe00707f,
}

var DIVU = Instr{
    name: "DIVU",
    match: 0x2005033,
    mask: 0xfe00707f,
}

var EBREAK = Instr{
    name: "EBREAK",
    match: 0x100073,
    mask: 0xffffffff,
}

var ECALL = Instr{
    name: "ECALL",
    match: 0x73,
    mask: 0xffffffff,
}

var FENCE = Instr{
    name: "FENCE",
    match: 0xf,
    mask: 0x707f,
}

var JAL = Instr{
    name: "JAL",
    match: 0x6f,
    mask: 0x7f,
}

var JALR = Instr{
    name: "JALR",
    match: 0x67,
    mask: 0x707f,
}

var LB = Instr{
    name: "LB",
    match: 0x3,
    mask: 0x707f,
}

var LBU = Instr{
    name: "LBU",
    match: 0x4003,
    mask: 0x707f,
}

var LH = Instr{
    name: "LH",
    match: 0x1003,
    mask: 0x707f,
}

var LHU = Instr{
    name: "LHU",
    match: 0x5003,
    mask: 0x707f,
}

var LRW = Instr{
    name: "LRW",
    match: 0x1000202f,
    mask: 0xf9f0707f,
}

var LUI = Instr{
    name: "LUI",
    match: 0x37,
    mask: 0x7f,
}

var LW = Instr{
    name: "LW",
    match: 0x2003,
    mask: 0x707f,
}

var MUL = Instr{
    name: "MUL",
    match: 0x2000033,
    mask: 0xfe00707f,
}

var MULH = Instr{
    name: "MULH",
    match: 0x2001033,
    mask: 0xfe00707f,
}

var MULHSU = Instr{
    name: "MULHSU",
    match: 0x2002033,
    mask: 0xfe00707f,
}

var MULHU = Instr{
    name: "MULHU",
    match: 0x2003033,
    mask: 0xfe00707f,
}

var OR = Instr{
    name: "OR",
    match: 0x6033,
    mask: 0xfe00707f,
}

var ORI = Instr{
    name: "ORI",
    match: 0x6013,
    mask: 0x707f,
}

var REM = Instr{
    name: "REM",
    match: 0x2006033,
    mask: 0xfe00707f,
}

var REMU = Instr{
    name: "REMU",
    match: 0x2007033,
    mask: 0xfe00707f,
}

var SB = Instr{
    name: "SB",
    match: 0x23,
    mask: 0x707f,
}

var SCW = Instr{
    name: "SCW",
    match: 0x1800202f,
    mask: 0xf800707f,
}

var SH = Instr{
    name: "SH",
    match: 0x1023,
    mask: 0x707f,
}

var SLL = Instr{
    name: "SLL",
    match: 0x1033,
    mask: 0xfe00707f,
}

var SLLI = Instr{
    name: "SLLI",
    match: 0x1013,
    mask: 0xfe00707f,
}

var SLT = Instr{
    name: "SLT",
    match: 0x2033,
    mask: 0xfe00707f,
}

var SLTI = Instr{
    name: "SLTI",
    match: 0x2013,
    mask: 0x707f,
}

var SLTIU = Instr{
    name: "SLTIU",
    match: 0x3013,
    mask: 0x707f,
}

var SLTU = Instr{
    name: "SLTU",
    match: 0x3033,
    mask: 0xfe00707f,
}

var SRA = Instr{
    name: "SRA",
    match: 0x40005033,
    mask: 0xfe00707f,
}

var SRAI = Instr{
    name: "SRAI",
    match: 0x40005013,
    mask: 0xfe00707f,
}

var SRL = Instr{
    name: "SRL",
    match: 0x5033,
    mask: 0xfe00707f,
}

var SRLI = Instr{
    name: "SRLI",
    match: 0x5013,
    mask: 0xfe00707f,
}

var SUB = Instr{
    name: "SUB",
    match: 0x40000033,
    mask: 0xfe00707f,
}

var SW = Instr{
    name: "SW",
    match: 0x2023,
    mask: 0x707f,
}

var XOR = Instr{
    name: "XOR",
    match: 0x4033,
    mask: 0xfe00707f,
}

var XORI = Instr{
    name: "XORI",
    match: 0x4013,
    mask: 0x707f,
}

var AllInstrs = []Instr{
	ADD, 
	ADDI, 
	AMOADDW, 
	AMOANDW, 
	AMOMAXW, 
	AMOMAXUW, 
	AMOMINW, 
	AMOMINUW, 
	AMOORW, 
	AMOSWAPW, 
	AMOXORW, 
	AND, 
	ANDI, 
	AUIPC, 
	BEQ, 
	BGE, 
	BGEU, 
	BLT, 
	BLTU, 
	BNE, 
	CSRRC, 
	CSRRCI, 
	CSRRS, 
	CSRRSI, 
	CSRRW, 
	CSRRWI, 
	DIV, 
	DIVU, 
	EBREAK, 
	ECALL, 
	FENCE, 
	JAL, 
	JALR, 
	LB, 
	LBU, 
	LH, 
	LHU, 
	LRW, 
	LUI, 
	LW, 
	MUL, 
	MULH, 
	MULHSU, 
	MULHU, 
	OR, 
	ORI, 
	REM, 
	REMU, 
	SB, 
	SCW, 
	SH, 
	SLL, 
	SLLI, 
	SLT, 
	SLTI, 
	SLTIU, 
	SLTU, 
	SRA, 
	SRAI, 
	SRL, 
	SRLI, 
	SUB, 
	SW, 
	XOR, 
	XORI, 
}


func MatchInstr(x uint32) (Instr, error) {
	for _, pat := range AllInstrs {
		if (x & pat.mask) == pat.match {
			return pat, nil
		}
	}

	return Instr{}, InvalidInstrErr
}
