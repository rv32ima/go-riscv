
baremetal.elf:     file format elf32-littleriscv

SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80000170 l    d  .data	00000000 .data
80000210 l    d  .heap	00000000 .heap
80001210 l    d  .stack	00000000 .stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 baremetal.c
80000014 l     F .text	00000008 lprint
80000210 g       .heap	00000000 _sheap
00001000 g       *ABS*	00000000 __stack_size
80000210 g       .data	00000000 __BSS_BEGIN__
00001000 g       *ABS*	00000000 __heap_size
80000000 g       .text	00000000 _start
8000020d g       .data	00000000 __DATA_END__
1100bff8 g       *ABS*	00000000 TIMERL
80000210 g       .data	00000000 __BSS_END__
8000001c g     F .text	00000154 main
80000170 g       .text	00000000 __TEXT_END__
80002210 g       .stack	00000000 _sstack
80001210 g       .stack	00000000 _estack
80000170 g       .data	00000000 __DATA_BEGIN__
80001210 g       .heap	00000000 _eheap
11100000 g       *ABS*	00000000 SYSCON
80000000 g       .text	00000000 __TEXT_BEGIN__



baremetal.elf:     file format elf32-littleriscv


Disassembly of section .text:

80000000 <__TEXT_BEGIN__>:
80000000:	00002117          	auipc	sp,0x2
80000004:	21010113          	addi	sp,sp,528 # 80002210 <_sstack>
80000008:	ff010113          	addi	sp,sp,-16
8000000c:	00112623          	sw	ra,12(sp)
80000010:	00c000ef          	jal	8000001c <main>

80000014 <lprint>:

// These will not turn into function calls, but instead will find a way
// of writing the assembly in-line
static void lprint( const char * s )
{
	asm volatile( ".option norvc\ncsrrw x0, 0x138, %0\n" : : "r" (s));
80000014:	13851073          	csrw	0x138,a0
}
80000018:	00008067          	ret

8000001c <main>:
	asm volatile(".option norvc\ncsrr %0, 0xC00": "=r" (ccount));
	return ccount;
}

int main()
{
8000001c:	fd010113          	addi	sp,sp,-48
80000020:	02812423          	sw	s0,40(sp)
	lprint("\n");
80000024:	80000437          	lui	s0,0x80000
80000028:	17040513          	addi	a0,s0,368 # 80000170 <__TEXT_END__>
{
8000002c:	02112623          	sw	ra,44(sp)
80000030:	02912223          	sw	s1,36(sp)
80000034:	03212023          	sw	s2,32(sp)
80000038:	01312e23          	sw	s3,28(sp)
8000003c:	01412c23          	sw	s4,24(sp)
	lprint("\n");
80000040:	fd5ff0ef          	jal	80000014 <lprint>
	lprint("Hello world from RV32 land.\n");
80000044:	80000537          	lui	a0,0x80000
80000048:	17450513          	addi	a0,a0,372 # 80000174 <__TEXT_END__+0x4>
8000004c:	fc9ff0ef          	jal	80000014 <lprint>
	lprint("main is at: ");
80000050:	80000537          	lui	a0,0x80000
80000054:	19450513          	addi	a0,a0,404 # 80000194 <__TEXT_END__+0x24>
80000058:	fbdff0ef          	jal	80000014 <lprint>
	asm volatile( ".option norvc\ncsrrw x0, 0x137, %0\n" : : "r" (ptr));
8000005c:	800007b7          	lui	a5,0x80000
80000060:	01c78793          	addi	a5,a5,28 # 8000001c <main>
80000064:	13779073          	csrw	0x137,a5
	pprint( (intptr_t)main );
	// lprint("\nAssembly code: ");
	// asm_demo_func();
	lprint("\n");
80000068:	17040513          	addi	a0,s0,368
8000006c:	fa9ff0ef          	jal	80000014 <lprint>
	asm volatile(".option norvc\ncsrr %0, 0xC00": "=r" (ccount));
80000070:	c00029f3          	rdcycle	s3

	// Wait a while.
	uint32_t cyclecount_initial = get_cyc_count();
	uint32_t timer_initial = TIMERL;
80000074:	1100c937          	lui	s2,0x1100c
80000078:	ff892a03          	lw	s4,-8(s2) # 1100bff8 <TIMERL>

	volatile int i;
	for( i = 0; i < 100000; i++ )
8000007c:	000187b7          	lui	a5,0x18
80000080:	00012623          	sw	zero,12(sp)
80000084:	69f78793          	addi	a5,a5,1695 # 1869f <__heap_size+0x1769f>
80000088:	00c12703          	lw	a4,12(sp)
8000008c:	0ce7d863          	bge	a5,a4,8000015c <main+0x140>
	{
		asm volatile( "nop" );
	}

	lprint("asdf\n");
80000090:	80000537          	lui	a0,0x80000
80000094:	1a450513          	addi	a0,a0,420 # 800001a4 <__TEXT_END__+0x34>
80000098:	f7dff0ef          	jal	80000014 <lprint>
	asm volatile(".option norvc\ncsrr %0, 0xC00": "=r" (ccount));
8000009c:	c00024f3          	rdcycle	s1

	// Gather the wall-clock time and # of cycles
	uint32_t cyclecount = get_cyc_count() - cyclecount_initial;
	uint32_t timer = (TIMERL - timer_initial) / 1000000;
800000a0:	ff892903          	lw	s2,-8(s2)
800000a4:	000f47b7          	lui	a5,0xf4

	lprint("Initial cycle count: ");
800000a8:	80000537          	lui	a0,0x80000
	uint32_t timer = (TIMERL - timer_initial) / 1000000;
800000ac:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3240>
800000b0:	41490933          	sub	s2,s2,s4
	lprint("Initial cycle count: ");
800000b4:	1ac50513          	addi	a0,a0,428 # 800001ac <__TEXT_END__+0x3c>
	uint32_t timer = (TIMERL - timer_initial) / 1000000;
800000b8:	02f95933          	divu	s2,s2,a5
	uint32_t cyclecount = get_cyc_count() - cyclecount_initial;
800000bc:	413484b3          	sub	s1,s1,s3
	lprint("Initial cycle count: ");
800000c0:	f55ff0ef          	jal	80000014 <lprint>
	asm volatile( ".option norvc\ncsrrw x0, 0x136, %0\n" : : "r" (ptr));
800000c4:	13699073          	csrw	0x136,s3
	nprint(cyclecount_initial);
	lprint("\n");
800000c8:	17040513          	addi	a0,s0,368
800000cc:	f49ff0ef          	jal	80000014 <lprint>

	lprint("Cycle count difference: ");
800000d0:	80000537          	lui	a0,0x80000
800000d4:	1c450513          	addi	a0,a0,452 # 800001c4 <__TEXT_END__+0x54>
800000d8:	f3dff0ef          	jal	80000014 <lprint>
	asm volatile( ".option norvc\ncsrrw x0, 0x136, %0\n" : : "r" (ptr));
800000dc:	13649073          	csrw	0x136,s1
	nprint(cyclecount);
	lprint("\n");
800000e0:	17040513          	addi	a0,s0,368
800000e4:	f31ff0ef          	jal	80000014 <lprint>

	lprint("Timer: ");
800000e8:	80000537          	lui	a0,0x80000
800000ec:	1e050513          	addi	a0,a0,480 # 800001e0 <__TEXT_END__+0x70>
800000f0:	f25ff0ef          	jal	80000014 <lprint>
	asm volatile( ".option norvc\ncsrrw x0, 0x136, %0\n" : : "r" (ptr));
800000f4:	13691073          	csrw	0x136,s2
	nprint(timer);
	lprint("\n");
800000f8:	17040513          	addi	a0,s0,368
800000fc:	f19ff0ef          	jal	80000014 <lprint>

	lprint( "Processor effective speed: ");
80000100:	80000537          	lui	a0,0x80000
80000104:	1e850513          	addi	a0,a0,488 # 800001e8 <__TEXT_END__+0x78>
80000108:	f0dff0ef          	jal	80000014 <lprint>
	nprint( cyclecount / timer );
8000010c:	0324d4b3          	divu	s1,s1,s2
	asm volatile( ".option norvc\ncsrrw x0, 0x136, %0\n" : : "r" (ptr));
80000110:	13649073          	csrw	0x136,s1
	lprint( " Mcyc/s\n");
80000114:	80000537          	lui	a0,0x80000
80000118:	20450513          	addi	a0,a0,516 # 80000204 <__TEXT_END__+0x94>
8000011c:	ef9ff0ef          	jal	80000014 <lprint>

	lprint("\n");
80000120:	17040513          	addi	a0,s0,368
80000124:	ef1ff0ef          	jal	80000014 <lprint>
	SYSCON = 0x5555; // Power off
}
80000128:	02c12083          	lw	ra,44(sp)
8000012c:	02812403          	lw	s0,40(sp)
	SYSCON = 0x5555; // Power off
80000130:	000057b7          	lui	a5,0x5
80000134:	11100737          	lui	a4,0x11100
80000138:	55578793          	addi	a5,a5,1365 # 5555 <__heap_size+0x4555>
8000013c:	00f72023          	sw	a5,0(a4) # 11100000 <SYSCON>
}
80000140:	02412483          	lw	s1,36(sp)
80000144:	02012903          	lw	s2,32(sp)
80000148:	01c12983          	lw	s3,28(sp)
8000014c:	01812a03          	lw	s4,24(sp)
80000150:	00000513          	li	a0,0
80000154:	03010113          	addi	sp,sp,48
80000158:	00008067          	ret
		asm volatile( "nop" );
8000015c:	00000013          	nop
	for( i = 0; i < 100000; i++ )
80000160:	00c12703          	lw	a4,12(sp)
80000164:	00170713          	addi	a4,a4,1
80000168:	00e12623          	sw	a4,12(sp)
8000016c:	f1dff06f          	j	80000088 <main+0x6c>
